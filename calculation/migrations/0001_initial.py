# Generated by Django 5.1 on 2024-08-10 17:52

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MarketplaceCommission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='Название категории товара.', max_length=100)),
                ('fbs_rate', models.FloatField()),
                ('fbo_rate', models.FloatField()),
                ('dbs_rate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='TaxRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.FloatField(choices=[(0.01, '1%'), (0.07, '7%'), (0.15, '15%'), (0.25, '25%')])),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название товара.', max_length=255)),
                ('purchase_price', models.DecimalField(decimal_places=2, help_text='Себестоимость закупки товара за 1 шт.', max_digits=10)),
                ('desired_price', models.DecimalField(blank=True, decimal_places=2, help_text='Желаемая стоимость продажи. Можно ввести как произвольную сумму.', max_digits=10, null=True)),
                ('margin_percentage', models.FloatField(blank=True, help_text='Процент маржинальности. Используется для расчета цены продажи, если не указана желаемая цена.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('logistics_cost', models.DecimalField(decimal_places=2, help_text='Общая стоимость логистики за партию.', max_digits=10)),
                ('logistics_quantity', models.PositiveIntegerField(help_text='Количество товаров в партии для расчета логистики.')),
                ('height', models.FloatField(help_text='Высота товара для расчета объема и стоимости доставки.')),
                ('length', models.FloatField(help_text='Длина товара для расчета объема и стоимости доставки.')),
                ('width', models.FloatField(help_text='Ширина товара для расчета объема и стоимости доставки.')),
                ('category', models.ForeignKey(help_text='Категория товара для определения комиссии маркетплейса.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='calculation.marketplacecommission')),
                ('tax_rate', models.ForeignKey(blank=True, help_text='Выбранная налоговая ставка. Если не указано, налог не учитывается при расчете.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='calculation.taxrate')),
            ],
        ),
    ]
